<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cash on Delivery (COD) | Fresh Harvest</title>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Poppins', sans-serif;
            background: url('https://images.unsplash.com/photo-1542838132-92c53300491e?ixlib=rb-1.2.1&auto=format&fit=crop&w=1350&q=80') no-repeat center center;
            background-size: cover;
            min-height: 100vh;
            position: relative;
        }
        body::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(46, 125, 50, 0.85);
            z-index: 0;
        }
        .header {
            background: rgba(255, 255, 255, 0.95);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }
        .cod-container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 16px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(76, 175, 80, 0.2);
        }
        .confirm-btn {
            background: linear-gradient(135deg, #4CAF50, #388E3C);
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px rgba(76, 175, 80, 0.3);
        }
        .confirm-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(76, 175, 80, 0.4);
        }
        .input-field {
            border: 1px solid #e2e8f0;
            transition: all 0.2s;
        }
        .input-field:focus {
            border-color: #4CAF50;
            box-shadow: 0 0 0 3px rgba(76, 175, 80, 0.2);
        }
        .footer {
            background: rgba(255, 255, 255, 0.9);
            box-shadow: 0 -4px 15px rgba(0, 0, 0, 0.1);
        }
        .profile-dropdown {
            display: none;
            position: absolute;
            right: 0;
            top: 100%;
            background: white;
            min-width: 200px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.1);
            border-radius: 8px;
            z-index: 100;
        }
        .profile-container:hover .profile-dropdown {
            display: block;
        }
        .cart-count {
            position: absolute;
            top: -8px;
            right: -8px;
            background: #ef4444;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
        }
    </style>
</head>
<body class="flex flex-col">
    <!-- Header -->
    <header class="header w-full py-4 z-10 relative">
        <div class="container mx-auto flex justify-between items-center px-4">
            <a href="index.html" class="text-2xl font-bold text-green-600 flex items-center">
                <i class="fas fa-leaf mr-2"></i>FreshHarvest
            </a>
            
            <div class="flex items-center space-x-6">
                <!-- Cart Icon with Count -->
                <a href="cart.html" class="relative text-gray-700 hover:text-green-600">
                    <i class="fas fa-shopping-cart text-xl"></i>
                    <span id="cart-count" class="cart-count">0</span>
                </a>
                
                <!-- Profile Icon with Dropdown -->
                <div class="profile-container relative">
                    <button id="profile-btn" class="flex items-center space-x-2 focus:outline-none">
                        <div class="w-10 h-10 rounded-full bg-green-100 flex items-center justify-center text-green-600">
                            <i class="fas fa-user"></i>
                        </div>
                        <span class="hidden md:inline-block font-medium">My Account</span>
                    </button>
                    
                    <div class="profile-dropdown py-2">
                        <div class="px-4 py-3 border-b">
                            <p class="font-medium" id="user-name">Loading...</p>
                            <p class="text-sm text-gray-600" id="user-email">Loading...</p>
                        </div>
                        <a href="orders.html" class="block px-4 py-2 hover:bg-gray-50">
                            <i class="fas fa-box mr-2"></i> My Orders
                        </a>
                        <a href="profile.html" class="block px-4 py-2 hover:bg-gray-50">
                            <i class="fas fa-user-cog mr-2"></i> Account Settings
                        </a>
                        <button id="logout-btn" class="w-full text-left px-4 py-2 hover:bg-gray-50 text-red-500">
                            <i class="fas fa-sign-out-alt mr-2"></i> Logout
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Main Content -->
    <main class="flex-grow container mx-auto px-4 py-8 flex items-center justify-center">
        <div class="cod-container p-8 max-w-md w-full">
            <h1 class="text-2xl font-bold text-center text-gray-800 mb-6">
                <i class="fas fa-money-bill-wave text-green-500 mr-2"></i>Cash on Delivery
            </h1>
            
            <!-- Order Summary -->
            <div class="bg-gray-50 rounded-lg p-4 mb-6">
                <h3 class="font-semibold text-gray-700 mb-2">Order Summary</h3>
                <div class="flex justify-between">
                    <span class="text-gray-600">Total Amount:</span>
                    <span class="font-bold text-green-600">₹<span id="payment-amount">0</span></span>
                </div>
            </div>
            
            <!-- Delivery Address Form -->
            <div class="mb-6">
                <h3 class="font-semibold text-gray-700 mb-4">Delivery Address</h3>
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Room/Apartment No.</label>
                        <input type="text" id="room-no" class="input-field w-full rounded-lg px-4 py-2" placeholder="Apt 42, Building Name">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Landmark (Nearby Place)</label>
                        <input type="text" id="landmark" class="input-field w-full rounded-lg px-4 py-2" placeholder="Near Central Park">
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">PIN Code</label>
                        <input type="text" id="pincode" maxlength="6" class="input-field w-full rounded-lg px-4 py-2" placeholder="6-digit PIN">
                        <p id="pincode-error" class="text-red-500 text-xs mt-1 hidden">Please enter a valid 6-digit PIN code</p>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">City</label>
                            <input type="text" id="city" class="input-field w-full rounded-lg px-4 py-2 bg-gray-100" readonly>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">State</label>
                            <input type="text" id="state" class="input-field w-full rounded-lg px-4 py-2 bg-gray-100" readonly>
                        </div>
                    </div>
                </div>
            </div>
            
            <button id="confirm-order" class="confirm-btn w-full text-white font-medium py-3 px-4 rounded-lg">
                <i class="fas fa-check-circle mr-2"></i> Confirm Order
            </button>
        </div>
    </main>

    <!-- Footer -->
    <footer class="footer w-full py-4 mt-8 z-10">
        <div class="container mx-auto text-center">
            <p class="text-sm text-gray-600">© 2025 FreshHarvest. All rights reserved.</p>
            <div class="flex justify-center space-x-4 mt-2">
                <span class="flex items-center text-xs text-gray-500">
                    <i class="fas fa-money-bill-wave mr-1"></i> Cash on Delivery Available
                </span>
                <span class="flex items-center text-xs text-gray-500">
                    <i class="fas fa-phone-alt mr-1"></i> Customer Support: 1800-123-4567
                </span>
            </div>
        </div>
    </footer>

    <script>
        // Backend API base URL
        const API_BASE_URL = 'https://your-backend-api.com'; // Replace with your actual backend URL
        
        document.addEventListener("DOMContentLoaded", function() {
            // Load cart count
            function updateCartCount() {
                // Try to fetch from backend first
                fetch(`${API_BASE_URL}/api/cart/count`, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                    }
                })
                .then(response => response.ok ? response.json() : { count: 0 })
                .then(data => {
                    document.getElementById('cart-count').textContent = data.count || 0;
                })
                .catch(() => {
                    // Fallback to localStorage
                    const cart = JSON.parse(localStorage.getItem('cart')) || [];
                    document.getElementById('cart-count').textContent = cart.reduce((sum, item) => sum + item.quantity, 0);
                });
            }
            
            // Fetch user profile data
            async function fetchUserProfile() {
                try {
                    // Mock user data for demonstration
                    let userData = {
                        name: "Krishna Adimani",
                        email: "krishna1adimani-02@example.com",
                        address: {
                            roomNo: "Flat 302, Green Valley Apartments",
                            landmark: "Near City Mall",
                            pincode: "560001",
                            city: "Bangalore",
                            state: "Karnataka"
                        }
                    };
                    
                    // In a real app, you would fetch from backend:
                    /*
                    const response = await fetch(`${API_BASE_URL}/api/user/profile`, {
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                        }
                    });
                    
                    if (!response.ok) throw new Error('Failed to fetch user profile');
                    const userData = await response.json();
                    */
                    
                    // Update profile dropdown
                    document.getElementById('user-name').textContent = userData.name || 'User';
                    document.getElementById('user-email').textContent = userData.email || '';
                    
                    // Pre-fill address if available
                    if (userData.address) {
                        document.getElementById('room-no').value = userData.address.roomNo || '';
                        document.getElementById('landmark').value = userData.address.landmark || '';
                        document.getElementById('pincode').value = userData.address.pincode || '';
                        document.getElementById('city').value = userData.address.city || '';
                        document.getElementById('state').value = userData.address.state || '';
                    }
                    
                } catch (error) {
                    console.error('Error fetching user profile:', error);
                    // Handle error (e.g., redirect to login if unauthorized)
                }
            }
            
            // Load order amount from URL or localStorage
            function loadOrderAmount() {
                const urlParams = new URLSearchParams(window.location.search);
                let totalAmount = parseFloat(urlParams.get('amount')) || 0;
                
                if (totalAmount <= 0) {
                    // Fallback to localStorage cart
                    const cart = JSON.parse(localStorage.getItem('cart')) || [];
                    totalAmount = cart.reduce((sum, item) => sum + (item.price * item.quantity), 0) * 1.1; // Add 10% tax
                }
                
                document.getElementById("payment-amount").textContent = totalAmount.toFixed(2);
                return totalAmount;
            }
            
            let totalAmount = loadOrderAmount();
            updateCartCount();
            
            // PIN Code validation
            document.getElementById("pincode").addEventListener("input", async function() {
                const pincode = this.value.trim();
                const errorElement = document.getElementById("pincode-error");
                
                if (pincode.length === 6 && /^\d+$/.test(pincode)) {
                    try {
                        // Mock API response for demonstration
                        const mockResponse = {
                            "Status": "Success",
                            "PostOffice": [{
                                "District": "Bangalore",
                                "State": "Karnataka"
                            }]
                        };
                        
                        // In a real app, you would use:
                        // const response = await fetch(`https://api.postalpincode.in/pincode/${pincode}`);
                        // const data = await response.json();
                        
                        const data = [mockResponse];
                        
                        if (data[0].Status === "Success") {
                            const postOffice = data[0].PostOffice[0];
                            document.getElementById("city").value = postOffice.District;
                            document.getElementById("state").value = postOffice.State;
                            errorElement.classList.add("hidden");
                        } else {
                            throw new Error("Invalid PIN code");
                        }
                    } catch (error) {
                        document.getElementById("city").value = "";
                        document.getElementById("state").value = "";
                        errorElement.textContent = "Invalid PIN code - please check and try again";
                        errorElement.classList.remove("hidden");
                    }
                } else if (pincode.length > 0) {
                    errorElement.textContent = "PIN code must be 6 digits";
                    errorElement.classList.remove("hidden");
                } else {
                    errorElement.classList.add("hidden");
                }
            });
            
            // Confirm order
            document.getElementById("confirm-order").addEventListener("click", async function() {
                const roomNo = document.getElementById("room-no").value.trim();
                const landmark = document.getElementById("landmark").value.trim();
                const pincode = document.getElementById("pincode").value.trim();
                const city = document.getElementById("city").value;
                const state = document.getElementById("state").value;
                
                // Validate inputs
                if (!roomNo || roomNo.length < 3) {
                    alert("Please enter a valid room/apartment number");
                    return;
                }
                
                if (!landmark || landmark.length < 3) {
                    alert("Please enter a valid landmark");
                    return;
                }
                
                if (!pincode || pincode.length !== 6 || !city || !state) {
                    alert("Please enter a valid 6-digit PIN code");
                    return;
                }
                
                // Create order object
                const order = {
                    id: 'ORD-' + Math.floor(Math.random() * 1000000),
                    date: new Date().toISOString(),
                    amount: totalAmount,
                    paymentMethod: 'COD',
                    address: {
                        roomNo,
                        landmark,
                        city,
                        state,
                        pincode
                    },
                    status: 'confirmed',
                    items: JSON.parse(localStorage.getItem('cart')) || []
                };
                
                try {
                    // In a real app, you would send to backend:
                    /*
                    const response = await fetch(`${API_BASE_URL}/api/orders`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                        },
                        body: JSON.stringify(order)
                    });
                    
                    if (!response.ok) throw new Error('Failed to create order');
                    */
                    
                    // For demo, save to localStorage
                    let orders = JSON.parse(localStorage.getItem('orders')) || [];
                    orders.push(order);
                    localStorage.setItem('orders', JSON.stringify(orders));
                    
                    // Clear cart
                    localStorage.removeItem('cart');
                    
                    // Redirect to confirmation
                    window.location.href = `order-confirmation.html?id=${order.id}&amount=${totalAmount}`;
                    
                } catch (error) {
                    console.error('Error creating order:', error);
                    alert('Failed to place order. Please try again.');
                }
            });
            
            // Logout functionality
            document.getElementById('logout-btn').addEventListener('click', function() {
                // Clear local storage
                localStorage.removeItem('authToken');
                localStorage.removeItem('userData');
                
                // Redirect to login
                window.location.href = 'login.html';
            });
            
            // Initialize page
            fetchUserProfile();
        });
    </script>
</body>
</html>